% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/roles.R
\name{add_role}
\alias{add_role}
\title{Manually Add Roles}
\usage{
add_role(rec, vars, role = "predictor", data = NULL)
}
\arguments{
\item{rec}{An existing \code{\link{recipe}}.}

\item{vars}{A character string of variable names or simple formula that defines one or more variable that will be assigned to the role.}

\item{role}{A character string for a single role.}

\item{data}{A data template that may be needed to resolve the formula (in case there is a \code{.}).}
}
\value{
An updated recipe object.
}
\description{
\code{add_role} can add a role definition to an existing variable in the recipe.
}
\details{
If \code{vars} is a formula, it should not include any functions, negative signs, or \code{.} (since there is no data element to evaluate it).
}
\examples{

data(biomass)

# Create the recipe manually
rec <- recipe(x = biomass)
rec
rec$var_info

rec <- add_role(rec, vars = colnames(biomass)[3:7], role = "predictor")
rec <- add_role(rec, vars = "sample", role = "id variable")
rec <- add_role(rec, vars = "dataset", role = "splitting variable")
rec <- add_role(rec, vars = "HHV", role = "outcome")
rec

# or, if you really want the formula method, you can change roles

rec2 <- recipe(HHV ~ ., data = biomass)
# Now change inappropriate predictor roles
rec2 <- add_role(rec2, vars = "sample", role = "id variable")
rec2 <- add_role(rec2, vars = "dataset", role = "splitting variable")
rec2$var_info

}
\concept{
preprocessing model_specification
}
\keyword{datagen}

