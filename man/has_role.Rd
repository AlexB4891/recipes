% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/selections.R
\name{has_role}
\alias{has_role}
\alias{all_predictors}
\alias{all_outcomes}
\alias{has_type}
\alias{all_numeric}
\alias{all_nominal}
\alias{peek_roles}
\alias{peek_types}
\alias{current_info}
\title{Role Selection}
\usage{
has_role(match = "predictor", roles = peek_roles())

all_predictors(roles = peek_roles())

all_outcomes(roles = peek_roles())

has_type(match = "numeric", types = peek_types())

all_numeric(types = peek_types())

all_nominal(types = peek_types())

peek_roles()

peek_types()

current_info()
}
\arguments{
\item{match}{A single character string for the query. Exact
matching is used (i.e. regular expressions won't work).}

\item{roles}{A list, where each element of the list is a character vector
of roles corresponding to that variable.}

\item{types}{A list, where each element of the list is a character vector
of types corresponding to that variable.}
}
\value{
Selector functions return an integer vector.

\code{current_info()} returns an environment with objects \code{vars}, and \code{data}.

\code{peek_roles()} and \code{peek_types()} return a list of character vectors pulled
from \code{current_info()$data}.
}
\description{
\code{has_role()}, \code{all_predictors()}, and \code{all_outcomes()} can be used to
select variables in a formula that have certain roles.
Similarly, \code{has_type()}, \code{all_numeric()}, and \code{all_nominal()} are used
to select columns based on their data type. See \code{\link[=selections]{selections()}}
for more details. \code{current_info()}, \code{peek_types()} and \code{peek_roles()} are
internal functions. All of these functions have have limited utility
outside of column selection in step functions.
}
\details{
Users should generally not have to alter \code{roles} or \code{types} as the default
peek function will select the correct roles and types to check against.
}
\examples{
data(biomass)

rec <- recipe(biomass) \%>\%
  update_role(
    carbon, hydrogen, oxygen, nitrogen, sulfur,
    new_role = "predictor"
  ) \%>\%
  update_role(HHV, new_role = "outcome") \%>\%
  update_role(sample, new_role = "id variable") \%>\%
  update_role(dataset, new_role = "splitting indicator")

recipe_info <- summary(rec)
recipe_info

roles_list <- split(recipe_info$role, recipe_info$variable)
has_role("id variable", roles = roles_list)
all_predictors(roles = roles_list)

}
\keyword{datagen}
