% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bag_imp.R
\name{step_bagimpute}
\alias{step_bagimpute}
\title{Imputation via Bagged Trees}
\usage{
step_bagimpute(recipe, terms, role = NA, trained = FALSE, models = NULL,
  options = list(nbagg = 25, keepX = FALSE), impute_with = NULL,
  seed_val = sample.int(10^4, 1))
}
\arguments{
\item{recipe}{A recipe object. The step will be added to the sequence of operations for this recipe.}

\item{terms}{A representation of the variables or terms that will be imputed.}

\item{role}{Not used by this step since no new variables are created.}

\item{trained}{A logical to indicate if the quantities for preprocessing have been estimated.}

\item{models}{The \code{\link[ipred]{ipredbagg}} objects are stored here once this bagged trees have be trained by \code{\link{learn.recipe}}.}

\item{options}{A list of options to \code{\link[ipred]{ipredbagg}}. Defaults are set for the arguments \code{nbagg} and \code{keepX} but others can be passed in. \bold{Note} that the arguments \code{X} and \code{y} should not be passed here.}

\item{impute_with}{A representation of the variables that will be used as predictors in the imputation model. If a column is included in both \code{terms} and \code{impute_with}, it will be removed from the latter.}

\item{seed_val}{A integer used to create reproducible models. The same seed is used across all imputation models.}
}
\value{
\code{step_bagimpute} returns an object of class \code{step_bagimpute}.
}
\description{
\code{step_bagimpute} creates a \emph{specification} of a recipe step that will create bagged tree models to impute missing data.
}
\details{
For each variables requiring imputation, a bagged tree is created where the outcome is the variable of interest and the predictors are any other variables listed in the \code{impute_with} formula. One advantage to the bagged tree is that is can accept predictors that have missing values themselves. This imputation method can be used when the variable of interest (and predictors) are numeric or categorical. Imputed categorical variables will remain categorical.

Note that if a variable that is to be imputed is also in \code{impute_with}, this variable will be ignored.

It is possible that missing values will still occur after imputation if a large majority (or all) of the imputing variables are also missing.
}
\examples{
data("credit_data")

## missing data per column
vapply(credit_data, function(x) mean(is.na(x)), c(num = 0))

set.seed(342)
in_training <- sample(1:nrow(credit_data), 2000)

credit_tr <- credit_data[ in_training, ]
credit_te <- credit_data[-in_training, ]
missing_examples <- c(14, 394, 565)

rec <- recipe(Price ~ ., data = credit_tr)

library(magrittr)
impute_rec <- rec \%>\%
  step_bagimpute(~ Status + Home + Marital + Job + Income + Assets + Debt,
                 impute_with  = ~ is_predictor())

imp_models <- learn(impute_rec, training = credit_tr)

inputed_te <- process(imp_models, newdata = credit_te)

credit_te[missing_examples,]
inputed_te[missing_examples, names(credit_te)]
}
\references{
Kuhn, M. and Johnson, K. (2013). \emph{Applied Predictive Modeling}. Springer Verlag.
}
\concept{
preprocessing imputation
}
\keyword{datagen}

