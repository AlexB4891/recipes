% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/recipe.R
\name{recipe}
\alias{recipe}
\alias{recipe.default}
\alias{recipe.formula}
\title{Create a Recipe for Preprocessing Data}
\usage{
recipe(x, ...)

\method{recipe}{default}(x, vars = colnames(x), roles = NULL, ...)

\method{recipe}{formula}(formula, data, ...)
}
\arguments{
\item{x}{an object. For the default method, \code{x} is a data frame or tibble of the \emph{template} data set (see below).}

\item{...}{further arguments passed to or from other methods (not currently used).}

\item{vars}{a character string of column names corresponding to variables that will be used in any context (see below)}

\item{roles}{a character string (the same length of \code{vars}) that describes a single role that the variable will take. This value could be anything but common roles are \code{"outcome"}, \code{"predictor"}, \code{"case_weight"}, or \code{"ID"}}

\item{formula}{A model formula. No in-line functions should be used here (e.g. \code{log(x)}, \code{x:y}, etc.). These types of transformations should be enacted using \code{step} functions in this package. Dots are allowed as are simple multivariate outcome terms (i.e. no need for \code{cbind}; see Examples).}

\item{data}{a data frame or tibble of the \emph{template} data set (see below).}
}
\value{
An object of class \code{recipe} with sub-objects: \item{var_info}{A tibble containing information about the original data set columns}\item{term_info}{A tibble that contains the current set of terms in the data set. This initially defaults to the same data contained in \code{var_info}.}\item{steps}{A list of \code{step} objects that define the sequence of preprocessing steps that will be applied to data. The default value is \code{NULL}}\item{template}{A tibble of the data. This is initialized to be the same as the data given in the \code{data} argument but can be different after the recipe is trained.}
}
\description{
A recipe is a description of what steps should be applied to a data set in order to get it ready for data analysis.
}
\examples{

# simple example:
data(biomass)

# split data
biomass_tr <- biomass[biomass$dataset == "Training",]
biomass_te <- biomass[biomass$dataset == "Testing",]

# When only predictors and outcomes, a simplified formula can be used.
rec <- recipe(HHV ~ carbon + hydrogen + oxygen + nitrogen + sulfur,
              data = biomass_tr)

library(magrittr)
sp_signed <- rec \%>\%
  step_center(~ is_predictor()) \%>\%
  step_scale(~ is_predictor()) \%>\%
  step_spatialsign(~ is_predictor())
sp_signed

# now estimate required parameters
sp_signed_trained <- learn(sp_signed, training = biomass_tr)
sp_signed_trained

# apply the preprocessing to a data set
test_set_values <- process(sp_signed_trained, newdata = biomass_te)

# multivariate example

# no need for `cbind(carbon, hydrogen)` for right-hand side
multi_y <- recipe(carbon + hydrogen ~ oxygen + nitrogen + sulfur, data = biomass)
multi_y <- multi_y \%>\% 
  step_center(~ is_outcome()) \%>\%
  step_scale(~ is_predictor())

multi_y_trained <- learn(multi_y, training = biomass_tr)

results <- process(multi_y_trained, biomass_te)
}
\author{
Max Kuhn
}
\concept{
preprocessing model_specification
}
\keyword{datagen}

